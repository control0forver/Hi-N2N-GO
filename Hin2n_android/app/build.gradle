apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.android.application'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--always', '--match', 'hin2ngo_v*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getEnvOrConsole = { env, prompt ->
    def val = null
    try {
        val = System.getenv(env)
        if (val == null || val == "") {
            if (System.console() != null) {
                val = System.console().readLine("\n" + prompt + ": ")
            }
        }
    } catch (ignored) {
        return null
    }
    return val
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "wang.switchy.hin2n"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true
        manifestPlaceholders = [ARCH: "all"]
        resConfigs "en", "zh-rCN", "zh-rTW"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                cFlags "-D__ANDROID_NDK__"
            }
        }
    }

    signingConfigs {
        debug {}

        release {
            storeFile file("HiN2NGO.jks")
            storePassword getEnvOrConsole("HIN2N_KSTOREPWD", "Keystore password")
            keyAlias "Hin2n"
            keyPassword getEnvOrConsole("HIN2N_KEYPWD", "Key password")
        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    gradle.taskGraph.beforeTask { Task task ->
        if (task.name.contains("Release")) {
            task.onlyIf {

            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                output.versionNameOverride = getVersionName()
                def arch = variant.mergedFlavor.manifestPlaceholders.ARCH
//              def fileName = "${variant.mergedFlavor.versionName}_${channel}_${arch}_${variant.buildType.name}.apk"
                def fileName = "${variant.mergedFlavor.versionName}_${arch}.apk"
                outputFileName = fileName
            }
        }
    }

    flavorDimensions "channel", "arch"

    productFlavors {
        normal {
            dimension "channel"
            manifestPlaceholders += [channel: "normal"]
        }
        arm {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
                manifestPlaceholders += [ARCH: "arm"]
            }
        }
        x86 {
            dimension "arch"
            ndk {
                abiFilters "x86", "x86_64"
                manifestPlaceholders += [ARCH: "x86"]
            }
        }
        allarch {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                manifestPlaceholders += [ARCH: "allarch"]
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

greendao {
    schemaVersion 4
    daoPackage 'wang.switchy.hin2n.storage.db.base'
    targetGenDir 'src/main/java'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.drawerlayout:drawerlayout:1.0.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.8'
    implementation 'com.android.support:design:28.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'org.greenrobot:eventbus:latest.integration'
    implementation 'org.greenrobot:greendao:3.2.0'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.github.f0ris.sweetalert:library:latest.release'
}
